#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <stdlib.h>
#include "get_next_line.h"
#include "libft/libft.h"

// typedef struct    s_list_map
// {
//     struct s_list_map    *next;
//     int            data;
// }                t_list_map;

// typedef	struct	s_map
// {
// 	int			x;
// 	int			y;
// 	t_list_map  **map;
// }	
// 			t_map;
// t_list_map    *ft_create_elem(int data)
// {
//     t_list_map    *temp;

//     temp = malloc(sizeof(t_list_map));
//     temp->data = data;
//     temp->next = NULL;
//     return (temp);
// }
// void    ft_list_push_back(t_list_map **begin_list, int data)
// {
//     t_list_map    *current;

//     current = *begin_list;
//     if (!current)
//     {
//         *begin_list = ft_create_elem(data);
//         return ;
//     }
//     while (current->next != 0)
//         current = current->next;
//     current->next = ft_create_elem(data);
// }
typedef struct s_mlx
{
	void	*mlx;
	void	*window;
	void	*img;
	char	*data;
	char 	map[25][25];
	int		map_width;
	int		map_height;
//	int		window_width;
//	int		window_height;
	t_image	*image;
}				t_mlx;
typedef struct s_image
{
	int bpp;
	int endian;
	int size;
//	void	*ptr;
//	char	*str;
}				t_image;


void	init(t_mlx *mlx)
{
	mlx->map_width = 0;
	mlx->map_height = -1;
//	mlx->window_width = 1800;
//	mlx->window_height = 800;

}
// int		ft_countstr(char **s)
// {
// 	int i;
// 	int j;

// 	j = 0;
// 	i = 0;
// 	while(s[j][i])
// 	{
// 		i = 0;
// 		while(s[j][i])
// 		{
// 			if(s[j][i] == '-')
// 				i++;
// 			while(ft_isdigit(s[j][i]))
// 				i++;
// 			if(s[j][i])
// 				return (0);
// 		}
// 		j++;
// 	}
// 	return (j);
// }
void	line(int x0, int y0, int )

void	draw_line(t_mlx *mlx)
{
	int x;
	int y;

	x = 0;
	y = 0;
	while(y < mlx->map_height)
	{
		x = 0;
		while(x < mlx->map_width)
		{
			if (x + 1 < mlx->map_width)
				line(x, y, x + 1, y);
			else if(y + 1 < mlx->map_height)
				line(x, y, 0, y + 1);
		}
		y++;
	}
}
int		read_file(t_mlx *mlx, int fd)
{
	char *line;
	char **s;
	int i;

	while(get_next_line(fd, &line) == 1)
	{
		 i = 0;
		mlx->map_width = 0;
		mlx->map_height++;
		if(!*(s = ft_strsplit(line, ' ')))
			return (0);
		while(s[i])
		{
			mlx->map[mlx->map_height][i] = atoi(s[i]);
			i++;
		}
		if(mlx->map_width == 0)
			mlx->map_width -= i;
		else if (mlx->map_width != 0 && mlx->map_width != i - 1)
			return 0;
#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <stdlib.h>
#include "get_next_line.h"
#include "libft/libft.h"

// typedef struct    s_list_map
// {
//     struct s_list_map    *next;
//     int            data;
// }                t_list_map;

// typedef	struct	s_map
// {
// 	int			x;
// 	int			y;
// 	t_list_map  **map;
// }	
// 			t_map;
// t_list_map    *ft_create_elem(int data)
// {
//     t_list_map    *temp;

//     temp = malloc(sizeof(t_list_map));
//     temp->data = data;
//     temp->next = NULL;
//     return (temp);
// }
// void    ft_list_push_back(t_list_map **begin_list, int data)
// {
//     t_list_map    *current;

//     current = *begin_list;
//     if (!current)
//     {
//         *begin_list = ft_create_elem(data);
//         return ;
//     }
//     while (current->next != 0)
//         current = current->next;
//     current->next = ft_create_elem(data);
// }
typedef struct s_mlx
{
	void	*mlx;
	void	*window;
	void	*img;
	char	*data;
	char 	map[25][25];
	int		map_width;
	int		map_height;
//	int		window_width;
//	int		window_height;
	t_image	*image;
}				t_mlx;
typedef struct s_image
{
	int bpp;
	int endian;
	int size;
//	void	*ptr;
//	char	*str;
}				t_image;


void	init(t_mlx *mlx)
{
	mlx->map_width = 0;
	mlx->map_height = -1;
//	mlx->window_width = 1800;
//	mlx->window_height = 800;

}
// int		ft_countstr(char **s)
// {
// 	int i;
// 	int j;

// 	j = 0;
// 	i = 0;
// 	while(s[j][i])
// 	{
// 		i = 0;
// 		while(s[j][i])
// 		{
// 			if(s[j][i] == '-')
// 				i++;
// 			while(ft_isdigit(s[j][i]))
// 				i++;
// 			if(s[j][i])
// 				return (0);
// 		}
// 		j++;
// 	}
// 	return (j);
// }
void	line(int x0, int y0, int )

void	draw_line(t_mlx *mlx)
{
	int x;
	int y;

	x = 0;
	y = 0;
	while(y < mlx->map_height)
	{
		x = 0;
		while(x < mlx->map_width)
		{
			if (x + 1 < mlx->map_width)
				line(x, y, x + 1, y);
			else if(y + 1 < mlx->map_height)
				line(x, y, 0, y + 1);
		}
		y++;
	}
}
int		read_file(t_mlx *mlx, int fd)
{
	char *line;
	char **s;
	int i;

	while(get_next_line(fd, &line) == 1)
	{
		 i = 0;
		mlx->map_width = 0;
		mlx->map_height++;
		if(!*(s = ft_strsplit(line, ' ')))
			return (0);
		while(s[i])
		{
			mlx->map[mlx->map_height][i] = atoi(s[i]);
			i++;
		}
		if(mlx->map_width == 0)
			mlx->map_width -= i;
		else if (mlx->map_width != 0 && mlx->map_width != i - 1)
			return 0;
		
	}
	return (1);
}

int		main(int	ar, char **av)
{
	t_mlx	mlx;
	int fd;

	init(&mlx);
	printf("%d", mlx.map_height);
	if (ar < 2)
	{
		puts("not enough arguments");
		return (1);
	}
	fd = open(av[1], O_RDONLY);
	if(fd < 0 || !read_file(&mlx, fd))
	{
		puts("Invaild file");
		return (1);
	}
	if (!(mlx.mlx = mlx_init())
		|| !(mlx.window = mlx_new_window(mlx.mlx, 800, 1800, "FDF"))
		|| !(mlx.image = ft_memalloc(sizeof(t_image)))
		|| !(mlx.img = mlx_new_image(mlx.mlx, 800, 1800))
		|| !(mlx.data = mlx_new_data_addr(mlx.img, &mlx.image->bpp, 
			&mlx.image->size, &mlx.image->endian)))
		exit(EXIT_FAILURE);
	draw_line(&mlx);
	return (0);
}

	}
	return (1);
}

int		main(int	ar, char **av)
{
	t_mlx	mlx;
	int fd;

	init(&mlx);
	printf("%d", mlx.map_height);
	if (ar < 2)
	{
		puts("not enough arguments");
		return (1);
	}
	fd = open(av[1], O_RDONLY);
	if(fd < 0 || !read_file(&mlx, fd))
	{
		puts("Invaild file");
		return (1);
	}
	if (!(mlx.mlx = mlx_init())
		|| !(mlx.window = mlx_new_window(mlx.mlx, 800, 1800, "FDF"))
		|| !(mlx.image = ft_memalloc(sizeof(t_image)))
		|| !(mlx.img = mlx_new_image(mlx.mlx, 800, 1800))
		|| !(mlx.data = mlx_new_data_addr(mlx.img, &mlx.image->bpp, 
			&mlx.image->size, &mlx.image->endian)))
		exit(EXIT_FAILURE);
	draw_line(&mlx);
	return (0);
}

